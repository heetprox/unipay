generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Payment {
  id            String   @id @default(cuid())
  transactionId String   @unique
  status        PaymentStatus
  amount        String?
  chainId       Int?
  userId        String?
  lockedQuoteId String?
  upiRef        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  jobs          Job[]
  
  @@map("payments")
}

model Job {
  id            String    @id @default(cuid())
  transactionId String
  method        JobMethod
  status        JobStatus
  chainId       Int?
  txHash        String?
  blockNumber   Int?
  gasUsed       String?
  error         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  payment       Payment   @relation(fields: [transactionId], references: [transactionId])
  
  @@map("jobs")
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
}

enum JobMethod {
  MINT
  CLAIM_USDC
  CLAIM_ETH
  CLAIM_ETH_QUOTE
  CLAIM_USDC_QUOTE
}

enum JobStatus {
  PENDING
  MINED
  FAILED
}

model Quote {
  id           String    @id @default(cuid())
  quoteId      String    @unique
  userId       String
  type         QuoteType
  inrAmount    Decimal   @db.Decimal(18, 2)
  outputAmount Decimal   @db.Decimal(18, 8)
  inputAmount  Decimal?   @db.Decimal(18, 8)
  ethPrice     Decimal?  @db.Decimal(18, 2)
  inrPrice     Decimal   @db.Decimal(18, 4)
  lockedAt     DateTime  @default(now())
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  @@map("quotes")
}

enum QuoteType {
  ETH_INR @map("ETH/INR")
  USD_INR @map("USD/INR")
}